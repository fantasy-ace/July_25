package com.example.ace.july_25.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.ace.july_25.beans.DatasEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATAS_ENTITY".
*/
public class DatasEntityDao extends AbstractDao<DatasEntity, Long> {

    public static final String TABLENAME = "DATAS_ENTITY";

    /**
     * Properties of entity DatasEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SuperChapterName = new Property(0, String.class, "superChapterName", false, "SUPER_CHAPTER_NAME");
        public final static Property PublishTime = new Property(1, long.class, "publishTime", false, "PUBLISH_TIME");
        public final static Property Visible = new Property(2, int.class, "visible", false, "VISIBLE");
        public final static Property NiceDate = new Property(3, String.class, "niceDate", false, "NICE_DATE");
        public final static Property ProjectLink = new Property(4, String.class, "projectLink", false, "PROJECT_LINK");
        public final static Property Author = new Property(5, String.class, "author", false, "AUTHOR");
        public final static Property Prefix = new Property(6, String.class, "prefix", false, "PREFIX");
        public final static Property Zan = new Property(7, int.class, "zan", false, "ZAN");
        public final static Property Origin = new Property(8, String.class, "origin", false, "ORIGIN");
        public final static Property ChapterName = new Property(9, String.class, "chapterName", false, "CHAPTER_NAME");
        public final static Property Link = new Property(10, String.class, "link", false, "LINK");
        public final static Property Title = new Property(11, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(12, int.class, "type", false, "TYPE");
        public final static Property UserId = new Property(13, int.class, "userId", false, "USER_ID");
        public final static Property ApkLink = new Property(14, String.class, "apkLink", false, "APK_LINK");
        public final static Property EnvelopePic = new Property(15, String.class, "envelopePic", false, "ENVELOPE_PIC");
        public final static Property ChapterId = new Property(16, int.class, "chapterId", false, "CHAPTER_ID");
        public final static Property SuperChapterId = new Property(17, int.class, "superChapterId", false, "SUPER_CHAPTER_ID");
        public final static Property Id = new Property(18, Long.class, "id", true, "_id");
        public final static Property Fresh = new Property(19, boolean.class, "fresh", false, "FRESH");
        public final static Property Collect = new Property(20, boolean.class, "collect", false, "COLLECT");
        public final static Property CourseId = new Property(21, int.class, "courseId", false, "COURSE_ID");
        public final static Property Desc = new Property(22, String.class, "desc", false, "DESC");
    }


    public DatasEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DatasEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATAS_ENTITY\" (" + //
                "\"SUPER_CHAPTER_NAME\" TEXT," + // 0: superChapterName
                "\"PUBLISH_TIME\" INTEGER NOT NULL ," + // 1: publishTime
                "\"VISIBLE\" INTEGER NOT NULL ," + // 2: visible
                "\"NICE_DATE\" TEXT," + // 3: niceDate
                "\"PROJECT_LINK\" TEXT," + // 4: projectLink
                "\"AUTHOR\" TEXT," + // 5: author
                "\"PREFIX\" TEXT," + // 6: prefix
                "\"ZAN\" INTEGER NOT NULL ," + // 7: zan
                "\"ORIGIN\" TEXT," + // 8: origin
                "\"CHAPTER_NAME\" TEXT," + // 9: chapterName
                "\"LINK\" TEXT," + // 10: link
                "\"TITLE\" TEXT," + // 11: title
                "\"TYPE\" INTEGER NOT NULL ," + // 12: type
                "\"USER_ID\" INTEGER NOT NULL ," + // 13: userId
                "\"APK_LINK\" TEXT," + // 14: apkLink
                "\"ENVELOPE_PIC\" TEXT," + // 15: envelopePic
                "\"CHAPTER_ID\" INTEGER NOT NULL ," + // 16: chapterId
                "\"SUPER_CHAPTER_ID\" INTEGER NOT NULL ," + // 17: superChapterId
                "\"_id\" INTEGER PRIMARY KEY ," + // 18: id
                "\"FRESH\" INTEGER NOT NULL ," + // 19: fresh
                "\"COLLECT\" INTEGER NOT NULL ," + // 20: collect
                "\"COURSE_ID\" INTEGER NOT NULL ," + // 21: courseId
                "\"DESC\" TEXT);"); // 22: desc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATAS_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DatasEntity entity) {
        stmt.clearBindings();
 
        String superChapterName = entity.getSuperChapterName();
        if (superChapterName != null) {
            stmt.bindString(1, superChapterName);
        }
        stmt.bindLong(2, entity.getPublishTime());
        stmt.bindLong(3, entity.getVisible());
 
        String niceDate = entity.getNiceDate();
        if (niceDate != null) {
            stmt.bindString(4, niceDate);
        }
 
        String projectLink = entity.getProjectLink();
        if (projectLink != null) {
            stmt.bindString(5, projectLink);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
 
        String prefix = entity.getPrefix();
        if (prefix != null) {
            stmt.bindString(7, prefix);
        }
        stmt.bindLong(8, entity.getZan());
 
        String origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindString(9, origin);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(10, chapterName);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(11, link);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
        stmt.bindLong(13, entity.getType());
        stmt.bindLong(14, entity.getUserId());
 
        String apkLink = entity.getApkLink();
        if (apkLink != null) {
            stmt.bindString(15, apkLink);
        }
 
        String envelopePic = entity.getEnvelopePic();
        if (envelopePic != null) {
            stmt.bindString(16, envelopePic);
        }
        stmt.bindLong(17, entity.getChapterId());
        stmt.bindLong(18, entity.getSuperChapterId());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(19, id);
        }
        stmt.bindLong(20, entity.getFresh() ? 1L: 0L);
        stmt.bindLong(21, entity.getCollect() ? 1L: 0L);
        stmt.bindLong(22, entity.getCourseId());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(23, desc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DatasEntity entity) {
        stmt.clearBindings();
 
        String superChapterName = entity.getSuperChapterName();
        if (superChapterName != null) {
            stmt.bindString(1, superChapterName);
        }
        stmt.bindLong(2, entity.getPublishTime());
        stmt.bindLong(3, entity.getVisible());
 
        String niceDate = entity.getNiceDate();
        if (niceDate != null) {
            stmt.bindString(4, niceDate);
        }
 
        String projectLink = entity.getProjectLink();
        if (projectLink != null) {
            stmt.bindString(5, projectLink);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
 
        String prefix = entity.getPrefix();
        if (prefix != null) {
            stmt.bindString(7, prefix);
        }
        stmt.bindLong(8, entity.getZan());
 
        String origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindString(9, origin);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(10, chapterName);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(11, link);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
        stmt.bindLong(13, entity.getType());
        stmt.bindLong(14, entity.getUserId());
 
        String apkLink = entity.getApkLink();
        if (apkLink != null) {
            stmt.bindString(15, apkLink);
        }
 
        String envelopePic = entity.getEnvelopePic();
        if (envelopePic != null) {
            stmt.bindString(16, envelopePic);
        }
        stmt.bindLong(17, entity.getChapterId());
        stmt.bindLong(18, entity.getSuperChapterId());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(19, id);
        }
        stmt.bindLong(20, entity.getFresh() ? 1L: 0L);
        stmt.bindLong(21, entity.getCollect() ? 1L: 0L);
        stmt.bindLong(22, entity.getCourseId());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(23, desc);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18);
    }    

    @Override
    public DatasEntity readEntity(Cursor cursor, int offset) {
        DatasEntity entity = new DatasEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // superChapterName
            cursor.getLong(offset + 1), // publishTime
            cursor.getInt(offset + 2), // visible
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // niceDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // projectLink
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // author
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // prefix
            cursor.getInt(offset + 7), // zan
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // origin
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // chapterName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // link
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // title
            cursor.getInt(offset + 12), // type
            cursor.getInt(offset + 13), // userId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // apkLink
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // envelopePic
            cursor.getInt(offset + 16), // chapterId
            cursor.getInt(offset + 17), // superChapterId
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // id
            cursor.getShort(offset + 19) != 0, // fresh
            cursor.getShort(offset + 20) != 0, // collect
            cursor.getInt(offset + 21), // courseId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // desc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DatasEntity entity, int offset) {
        entity.setSuperChapterName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPublishTime(cursor.getLong(offset + 1));
        entity.setVisible(cursor.getInt(offset + 2));
        entity.setNiceDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProjectLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuthor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrefix(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZan(cursor.getInt(offset + 7));
        entity.setOrigin(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setChapterName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLink(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTitle(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setType(cursor.getInt(offset + 12));
        entity.setUserId(cursor.getInt(offset + 13));
        entity.setApkLink(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setEnvelopePic(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setChapterId(cursor.getInt(offset + 16));
        entity.setSuperChapterId(cursor.getInt(offset + 17));
        entity.setId(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setFresh(cursor.getShort(offset + 19) != 0);
        entity.setCollect(cursor.getShort(offset + 20) != 0);
        entity.setCourseId(cursor.getInt(offset + 21));
        entity.setDesc(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DatasEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DatasEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DatasEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
